/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FHEGeoGuessr {
  export type LeaderboardEntryStruct = {
    player: AddressLike;
    distance: BigNumberish;
  };

  export type LeaderboardEntryStructOutput = [
    player: string,
    distance: bigint
  ] & { player: string; distance: bigint };
}

export interface FHEGeoGuessrInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackPlayerDistance"
      | "createRound"
      | "currentRoundId"
      | "decryptionRequests"
      | "endRound"
      | "getCurrentRound"
      | "getLeaderboard"
      | "getLeaderboardEntry"
      | "getPlayerBestDistance"
      | "getPlayerDistance"
      | "getPlayerGuessCount"
      | "getPlayerGuesses"
      | "getPlayerRank"
      | "getRound"
      | "getRoundPlayerCount"
      | "getRoundPlayers"
      | "hasPlayerGuessed"
      | "isDecryptionPending"
      | "isDistancePending"
      | "owner"
      | "protocolId"
      | "requestPlayerDistance"
      | "roundGuesses"
      | "roundLeaderboards"
      | "roundPlayers"
      | "rounds"
      | "submitGuess"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DistancesRevealed"
      | "GuessSubmitted"
      | "RoundCreated"
      | "RoundEnded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "callbackPlayerDistance",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createRound",
    values: [string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decryptionRequests",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboardEntry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerBestDistance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerDistance",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGuessCount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerGuesses",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerRank",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundPlayerCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundPlayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPlayerGuessed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDecryptionPending",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDistancePending",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestPlayerDistance",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundGuesses",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roundLeaderboards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundPlayers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitGuess",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "callbackPlayerDistance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboardEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerBestDistance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerDistance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGuessCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerGuesses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerRank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPlayerGuessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDecryptionPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDistancePending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestPlayerDistance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundGuesses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundLeaderboards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitGuess",
    data: BytesLike
  ): Result;
}

export namespace DistancesRevealedEvent {
  export type InputTuple = [roundId: BigNumberish];
  export type OutputTuple = [roundId: bigint];
  export interface OutputObject {
    roundId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuessSubmittedEvent {
  export type InputTuple = [roundId: BigNumberish, player: AddressLike];
  export type OutputTuple = [roundId: bigint, player: string];
  export interface OutputObject {
    roundId: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundCreatedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    panoramaUrl: string,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    panoramaUrl: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    panoramaUrl: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundEndedEvent {
  export type InputTuple = [roundId: BigNumberish];
  export type OutputTuple = [roundId: bigint];
  export interface OutputObject {
    roundId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEGeoGuessr extends BaseContract {
  connect(runner?: ContractRunner | null): FHEGeoGuessr;
  waitForDeployment(): Promise<this>;

  interface: FHEGeoGuessrInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackPlayerDistance: TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedSumOfSquares: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  createRound: TypedContractMethod<
    [
      panoramaUrl: string,
      encryptedLat: BytesLike,
      encryptedLon: BytesLike,
      inputProof: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  currentRoundId: TypedContractMethod<[], [bigint], "view">;

  decryptionRequests: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  endRound: TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;

  getCurrentRound: TypedContractMethod<[], [bigint], "view">;

  getLeaderboard: TypedContractMethod<
    [roundId: BigNumberish],
    [FHEGeoGuessr.LeaderboardEntryStructOutput[]],
    "view"
  >;

  getLeaderboardEntry: TypedContractMethod<
    [roundId: BigNumberish, rank: BigNumberish],
    [[string, bigint] & { player: string; distance: bigint }],
    "view"
  >;

  getPlayerBestDistance: TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerDistance: TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike, guessIndex: BigNumberish],
    [bigint],
    "view"
  >;

  getPlayerGuessCount: TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayerGuesses: TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        distances: bigint[];
        timestamps: bigint[];
        revealed: boolean[];
      }
    ],
    "view"
  >;

  getPlayerRank: TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;

  getRound: TypedContractMethod<
    [roundId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean, string] & {
        id: bigint;
        panoramaUrl: string;
        startTime: bigint;
        endTime: bigint;
        isRevealed: boolean;
        isActive: boolean;
        creator: string;
      }
    ],
    "view"
  >;

  getRoundPlayerCount: TypedContractMethod<
    [roundId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoundPlayers: TypedContractMethod<
    [roundId: BigNumberish],
    [string[]],
    "view"
  >;

  hasPlayerGuessed: TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;

  isDecryptionPending: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  isDistancePending: TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestPlayerDistance: TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike, guessIndex: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  roundGuesses: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, boolean] & { bestDistance: bigint; hasGuessed: boolean }],
    "view"
  >;

  roundLeaderboards: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[string, bigint] & { player: string; distance: bigint }],
    "view"
  >;

  roundPlayers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  rounds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        panoramaUrl: string;
        encryptedLatitude: string;
        encryptedLongitude: string;
        startTime: bigint;
        endTime: bigint;
        isRevealed: boolean;
        isActive: boolean;
        creator: string;
      }
    ],
    "view"
  >;

  submitGuess: TypedContractMethod<
    [
      roundId: BigNumberish,
      encryptedLat: BytesLike,
      encryptedLon: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackPlayerDistance"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      decryptedSumOfSquares: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createRound"
  ): TypedContractMethod<
    [
      panoramaUrl: string,
      encryptedLat: BytesLike,
      encryptedLon: BytesLike,
      inputProof: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentRoundId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decryptionRequests"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "endRound"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [FHEGeoGuessr.LeaderboardEntryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLeaderboardEntry"
  ): TypedContractMethod<
    [roundId: BigNumberish, rank: BigNumberish],
    [[string, bigint] & { player: string; distance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerBestDistance"
  ): TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerDistance"
  ): TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike, guessIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerGuessCount"
  ): TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerGuesses"
  ): TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        distances: bigint[];
        timestamps: bigint[];
        revealed: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerRank"
  ): TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, boolean, string] & {
        id: bigint;
        panoramaUrl: string;
        startTime: bigint;
        endTime: bigint;
        isRevealed: boolean;
        isActive: boolean;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoundPlayerCount"
  ): TypedContractMethod<[roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoundPlayers"
  ): TypedContractMethod<[roundId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasPlayerGuessed"
  ): TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDecryptionPending"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDistancePending"
  ): TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestPlayerDistance"
  ): TypedContractMethod<
    [roundId: BigNumberish, player: AddressLike, guessIndex: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roundGuesses"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, boolean] & { bestDistance: bigint; hasGuessed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "roundLeaderboards"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[string, bigint] & { player: string; distance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "roundPlayers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "rounds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        panoramaUrl: string;
        encryptedLatitude: string;
        encryptedLongitude: string;
        startTime: bigint;
        endTime: bigint;
        isRevealed: boolean;
        isActive: boolean;
        creator: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitGuess"
  ): TypedContractMethod<
    [
      roundId: BigNumberish,
      encryptedLat: BytesLike,
      encryptedLon: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DistancesRevealed"
  ): TypedContractEvent<
    DistancesRevealedEvent.InputTuple,
    DistancesRevealedEvent.OutputTuple,
    DistancesRevealedEvent.OutputObject
  >;
  getEvent(
    key: "GuessSubmitted"
  ): TypedContractEvent<
    GuessSubmittedEvent.InputTuple,
    GuessSubmittedEvent.OutputTuple,
    GuessSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "RoundCreated"
  ): TypedContractEvent<
    RoundCreatedEvent.InputTuple,
    RoundCreatedEvent.OutputTuple,
    RoundCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RoundEnded"
  ): TypedContractEvent<
    RoundEndedEvent.InputTuple,
    RoundEndedEvent.OutputTuple,
    RoundEndedEvent.OutputObject
  >;

  filters: {
    "DistancesRevealed(uint256)": TypedContractEvent<
      DistancesRevealedEvent.InputTuple,
      DistancesRevealedEvent.OutputTuple,
      DistancesRevealedEvent.OutputObject
    >;
    DistancesRevealed: TypedContractEvent<
      DistancesRevealedEvent.InputTuple,
      DistancesRevealedEvent.OutputTuple,
      DistancesRevealedEvent.OutputObject
    >;

    "GuessSubmitted(uint256,address)": TypedContractEvent<
      GuessSubmittedEvent.InputTuple,
      GuessSubmittedEvent.OutputTuple,
      GuessSubmittedEvent.OutputObject
    >;
    GuessSubmitted: TypedContractEvent<
      GuessSubmittedEvent.InputTuple,
      GuessSubmittedEvent.OutputTuple,
      GuessSubmittedEvent.OutputObject
    >;

    "RoundCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      RoundCreatedEvent.InputTuple,
      RoundCreatedEvent.OutputTuple,
      RoundCreatedEvent.OutputObject
    >;
    RoundCreated: TypedContractEvent<
      RoundCreatedEvent.InputTuple,
      RoundCreatedEvent.OutputTuple,
      RoundCreatedEvent.OutputObject
    >;

    "RoundEnded(uint256)": TypedContractEvent<
      RoundEndedEvent.InputTuple,
      RoundEndedEvent.OutputTuple,
      RoundEndedEvent.OutputObject
    >;
    RoundEnded: TypedContractEvent<
      RoundEndedEvent.InputTuple,
      RoundEndedEvent.OutputTuple,
      RoundEndedEvent.OutputObject
    >;
  };
}
